// Code generated by MockGen. DO NOT EDIT.
// Source: random.go
//
// Generated by this command:
//
//	mockgen -source=random.go -package service -destination=random_mock.go
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandom is a mock of Random interface.
type MockRandom struct {
	ctrl     *gomock.Controller
	recorder *MockRandomMockRecorder
	isgomock struct{}
}

// MockRandomMockRecorder is the mock recorder for MockRandom.
type MockRandomMockRecorder struct {
	mock *MockRandom
}

// NewMockRandom creates a new mock instance.
func NewMockRandom(ctrl *gomock.Controller) *MockRandom {
	mock := &MockRandom{ctrl: ctrl}
	mock.recorder = &MockRandomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandom) EXPECT() *MockRandomMockRecorder {
	return m.recorder
}

// GenerateRandomNumber mocks base method.
func (m *MockRandom) GenerateRandomNumber(nums ...int) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range nums {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateRandomNumber", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomNumber indicates an expected call of GenerateRandomNumber.
func (mr *MockRandomMockRecorder) GenerateRandomNumber(nums ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomNumber", reflect.TypeOf((*MockRandom)(nil).GenerateRandomNumber), nums...)
}
