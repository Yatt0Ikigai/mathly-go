// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package service -destination=service_mock.go
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// JWT mocks base method.
func (m *MockService) JWT() JWT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWT")
	ret0, _ := ret[0].(JWT)
	return ret0
}

// JWT indicates an expected call of JWT.
func (mr *MockServiceMockRecorder) JWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWT", reflect.TypeOf((*MockService)(nil).JWT))
}

// LobbyHandler mocks base method.
func (m *MockService) LobbyHandler() LobbyHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LobbyHandler")
	ret0, _ := ret[0].(LobbyHandler)
	return ret0
}

// LobbyHandler indicates an expected call of LobbyHandler.
func (mr *MockServiceMockRecorder) LobbyHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LobbyHandler", reflect.TypeOf((*MockService)(nil).LobbyHandler))
}

// Random mocks base method.
func (m *MockService) Random() Random {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Random")
	ret0, _ := ret[0].(Random)
	return ret0
}

// Random indicates an expected call of Random.
func (mr *MockServiceMockRecorder) Random() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockService)(nil).Random))
}
